#!/bin/bash
#  Update the application without downtime

# Ensure required commands are available
if ! command -v curl &> /dev/null
then
    echo "'curl' is not installed. Please install it to run test."
    exit 1
fi

# Forward the service port to a local port in the background
kubectl port-forward service/django-messaging-app-service 8080:8000 &

# Store the port-forward process ID
PORT_FORWARD_PID=$!
sleep 5 # for the port-forward to establish

# Run a background loop to continuously send curl requests
while true
do
    SERVICE_URL="http://localhost:8000/health/"
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $SERVICE_URL)
    if [ -z "$RESPONSE" ]; then
        echo "FAILURE: Request failed or returned empty response."
    else
        echo "SUCCESS: HTTP $RESPONSE"
    fi
    sleep 1
done &

# Store the curl loop's process ID
CURL_LOOP_PID=$!

echo "Applying the updated deployment file and triggering a rolling update..."
kubectl apply -f blue_deployment.yaml

# Monitor the rolling update progress
echo "Monitoring rollout status..."
kubectl rollout status deployment/messaging-app-blue

# Cleanup after the test
echo "Rolling update is complete!"

# Kill the background curl loop
kill $CURL_LOOP_PID > /dev/null 2>&1

# Kill the port-forward process
kill $PORT_FORWARD_PID > /dev/null 2>&1

# Verify the new pods are running
echo "Verifying the new pods:"
kubectl get pods -l app=messaging-app -o wide

echo "Rolling update finished successfully."